; *********************************************
; *  341 Programming Languages                *
; *  Fall 2019                                *
; *  Author: Yakup Genc                       *
; *  LEMYE CEREN GUMUS - 151044071            *
; *********************************************

;; utility functions 
(defun read-as-list (filename)
	(print "read-as-list RESULTS :")
	(setq str nil)
	(setq List nil)
	; Reads a file containing one word per line and returns a list of words (each word is in turn a list of characters)."
	(let ((in (open filename :if-does-not-exist nil)))
  (when in
    (loop for line = (read-line in nil)
        while line do (format t "ceren ~a~%" line) 
		do (if (equalp line "") ()(setq List (nconc List (list line))))
		)
    (close in)))
	(print List)
	(check_comment List)
	;(setq str (subseq str 3))
	;(print str)
	;(split-by-one-space str)

)
(defun split-by-one-space (string)
	(print string)
	(setq wordList nil)
	(setq letList nil)
	(setq temp 0)
	(setq mainList nil)
    (loop for i = 0 then (1+ j)
          as j = (position #\Space string :start i) 
        
          while j do (print (subseq string i j))
		  do (if (equalp (subseq string i j) "") (setq temp 1))
		  do (if (eq temp 0) (setq wordList (nconc wordList (list (subseq string i j)))))
		  do (setq temp 0)
		  )
			(print wordList)
	
 )	
 (defun check_comment(list)
	(setq temp nil)
	(setq counter 0)
	(setq tempStr nil)
	(setq wordList nil)
	(with-open-file (stream "C:\\Users\\user\\Desktop\\151044071_gumus_lemyeceren_hw2\\resultsLisp.txt" :direction :output)
	(map 'list (lambda (it)
	(if (equalp (subseq (string it) 0 2) ";;")(format stream "COMMENT"))
	(if (equalp (subseq (string it) 0 2) ";;")(terpri stream))
	(if (equalp (subseq (string it) 0 2) ";;")(setq temp 0))
	(if (equalp (subseq (string it) 0 6) "(deffun")(setq temp 2))
	(if (equalp (subseq (string it) 0 5) "(load")(setq temp 1))
	(if (equalp temp 1)(format stream "OP_OP"))
	(if (equalp temp 1)(terpri stream))
	(if (equalp temp 1)(format stream "KW_LOAD"))
	(if (equalp temp 1)(terpri stream))
	(if (equalp temp 1)(format stream "OP_OC"))
	(if (equalp temp 1)(terpri stream))
	(if (equalp temp 1)(format stream "IDENTİFİER"))
	(if (equalp temp 1)(terpri stream))
	(if (equalp temp 1)(format stream "OP_CC"))
	(if (equalp temp 1)(terpri stream))
	(if (equalp temp 1)(format stream "OP_CP"))
	(if (equalp temp 1)(terpri stream))
	(if (equalp temp 2)(format stream "OP_OP"))
	(if (equalp temp 2)(terpri stream))
	(if (equalp temp 2)(format stream "KW_DEFFUN"))
	(if (equalp temp 2)(terpri stream))
	(if (equalp temp 2)(format stream "OP_OP"))
	(if (equalp temp 2) 
	(loop for i = 6 then (1+ j)
          as j = (position #\Space it :start i) 
        
          while j
		  do (if (equalp (subseq it i j) "") ()
			(setq wordList (nconc wordList (list  (subseq it i j)))))
		do (setq tem (+ 1 j))
		  
	))
	(if (equalp temp 2) (setq wordList (nconc wordList (list  (subseq it tem (length (string it)))))))
	(if (equalp temp 2) (map 'list (lambda (c)
		(terpri stream)
		(if (equalp (position-if #'digit-char-p (string c)) nil)(format stream "IDENTIFIERS")
		  (format stream "VALUE"))) wordList))
	(if (equalp temp 2)(terpri stream))
	(if (equalp temp 2)(format stream "OP_CP"))
	(if (equalp temp 2)(terpri stream))
	(setq wordList nil)
	(if (equalp (subseq (string it) 0 6) "(liste")(setq temp 4))
	(if (equalp temp 4)(format stream "OP_OP"))
	(if (equalp temp 4)(terpri stream))
	(if (equalp temp 4)(format stream "SYNTAX_ERROR liste cannot be tokenized "))
	(if (equalp temp 4)(terpri stream))
	(if (equalp (subseq (string it) 0 6) "(list ")(setq temp 5))
	(if (equalp temp 5)(format stream "OP_OP"))
	(if (equalp temp 5)(terpri stream))
	(if (equalp temp 5)(format stream "KW_LIST"))
	(if (equalp temp 5) 
	(loop for i = 5 then (1+ j)
          as j = (position #\Space it :start i) 
        
          while j
		  do (if (equalp (subseq it i j) "") ()
			(setq wordList (nconc wordList (list  (subseq it i j)))))
		do (setq tem (+ 1 j))
		  
	))
	(if (equalp temp 5) (setq wordList (nconc wordList (list  (subseq it tem (length (string it)))))))
	(if (equalp temp 5) (map 'list (lambda (c)
		(terpri stream)
		(if (equalp (position-if #'digit-char-p (string c)) nil)(format stream "IDENTIFIERS")
		  (format stream "VALUE"))) wordList))
	(setq wordList nil)
	(if (equalp temp 5) (terpri stream))
	(if (equalp temp 5)(format stream "OP_CP"))
	(if (equalp temp 5)(terpri stream))
	(setq w 0)
	(if  (equalp temp nil) (setq w 1))
	(setq temp1  nil)
	(setq o 1)
	(setq iter it)
	(if  (equalp w 1)
	(loop for p = 0 then (1+ k)
          as k = (position #\Space iter :start p) 
        
          while k
		  do (print (subseq iter p k))
		  do (if (equalp (subseq iter p k) "") () (setq o 0))
		  do (if (equalp o 0)(setq wordList (nconc wordList (list (subseq  iter p k)))))
		  do (setq tem (+ 1 k))
	))
	 (if (equalp wordList nil) ()(setq wordList (nconc wordList (list (subseq  iter tem (length (string iter)))))))
	 (if (equalp wordList nil) ()(map 'list (lambda (ite)
	 (if (equalp "(if" ite)(setq temp1 10))
     (if (equalp "(case" ite)(setq temp1 10))
	 (if (equalp "(when" ite)(setq temp1 10))
	 (if (equalp "(cond" ite)(setq temp1 10))
	 (if (equalp "(<" ite)(setq temp1 22))
	 (if (equalp "(>" ite)(setq temp1 22))
	 (if (equalp "(>=" ite)(setq temp1 23))
	 (if (equalp "(<=" ite)(setq temp1 23))
	 (if (equalp "(defvar" ite)(setq temp1 21))
	 (if (equalp "(setq" ite)(setq temp1 21))
	 (if (equalp "(setf" ite)(setq temp1 21))
	 (if (equalp "(exit)" ite)(setq temp1 24))
	 (if (equalp "(quit)" ite)(setq temp1 24))
	 (if (equalp "(read-char" ite)(setq temp1 20))
	 (if (equalp "(read-line" ite)(setq temp1 20))
	 (if (equalp "(read-byte" ite)(setq temp1 20))
	 (if (equalp "(parse-integer" ite)(setq temp1 20))
     (if (equalp "(terpri" ite)(setq temp1 20))
	 (if (equalp "(with-open-file" ite)(setq temp1 20))
	 (if (equalp "(let" ite)(setq temp1 20))
	 (if (equalp "(open" ite)(setq temp1 20))
	 (if (equalp "(write-byte" ite)(setq temp1 20))
	 (if (equalp "(prin1" ite)(setq temp1 20))
	 (if (equalp "(princ" ite)(setq temp1 20))
	 (if (equalp "(format" ite)(setq temp1 20))
	 (if (equalp "(print" ite)(setq temp1 20))
	 (if (equalp "(write-line" ite)(setq temp1 20))
	 (if (equalp "(write-char" ite)(setq temp1 20))
	 (if (equalp "(write" ite)(setq temp1 20))
	 (if (equalp "(for" ite)(setq temp1 11))
	 (if (equalp "(loop for" ite)(setq temp1 11))
	 (if (equalp "(dotimes" ite)(setq temp1 11))
	 (if (equalp "(dolist" ite)(setq temp1 11))
	 (if (equalp "(do" ite)(setq temp1 11))
		 (if (equalp "(map" ite)(setq temp1 11))
		 (if (equalp "(mapcar" ite)(setq temp1 11))
		 (if (equalp "(maphash" ite)(setq temp1 11))
		 (if (equalp "nil)" ite)(setq temp1 12))
		 (if (equalp "(equal" ite)(setq temp1 13))
		 (if (equalp "(equalp" ite)(setq temp1 13))
		 (if (equalp "(eq" ite)(setq temp1 13))
		 (if (equalp "(and" ite)(setq temp1 14))
		 (if (equalp "(or" ite)(setq temp1 15))
		 (if (equalp "T" ite)(setq temp1 16))
		 (if (equalp "F" ite)(setq temp1 17))
		 (if (equalp "(append" ite)(setq temp1 18))
		 (if (equalp "," ite)(setq temp1 1))
		 (if (equalp "+" ite)(setq temp1 0))
		 (if (equalp "*" ite)(setq temp1 5))
		 (if (equalp "-" ite)(setq temp1 99))
		 (if (equalp "/" ite)(setq temp1 4))
		 (if (equalp "“" ite)(setq temp1 8))
		 (if (equalp "“" ite)(setq temp1 9))
		 (if (equalp "**" ite)(setq temp1 7))
		 (if (equalp "(+" ite)(setq temp1 30))
		 (if (equalp "(-" ite)(setq temp1 31))
		 (if (equalp "(*" ite)(setq temp1 32))
		 (if (equalp "(/" ite)(setq temp1 33))
		 (if (equalp "(**" ite)(setq temp1 34))
		 (if (equalp "(concatenate" ite)(setq temp1 19))
		 (if (equalp temp1 13)(format stream "OP_OP"))
		 (if (equalp temp1 13)(terpri stream))
		 (if (equalp temp1 13)(format stream "KW_EQUAL"))
		 (if (equalp temp1 13)(terpri stream))
		 (if (equalp temp1 14)(format stream "OP_OP"))
		 (if (equalp temp1 14)(terpri stream))
		 (if (equalp temp1 14)(format stream "KW_AND"))
		 (if (equalp temp1 14)(terpri stream))
		 (if (equalp temp1 15)(format stream "OP_OP"))
		 (if (equalp temp1 15)(terpri stream))
		 (if (equalp temp1 15)(format stream "KW_OR"))
		 (if (equalp temp1 15)(terpri stream))
		 (if (equalp temp1 17)(format stream "KW_FALSE"))
		 (if (equalp temp1 17)(terpri stream))
		 (if (equalp temp1 16)(format stream "KW_TRUE"))
		 (if (equalp temp1 16)(terpri stream))
		 (if (equalp temp1 18)(format stream "KW_APPEND"))
		 (if (equalp temp1 18)(terpri stream))
		 (if (equalp temp1 12)(format stream "KW_NIL"))
		 (if (equalp temp1 12)(terpri stream))
		 (if (equalp temp1 12)(format stream "OP_CP"))
		 (if (equalp temp1 12)(terpri stream))
		 (if (equalp temp1 10)(format stream "OP_OP"))
		 (if (equalp temp1 10)(terpri stream))
		 (if (equalp temp1 10)(format stream "KW_IF"))
		 (if (equalp temp1 10)(terpri stream))
		 (if (equalp temp1 11)(format stream "OP_OP"))
		 (if (equalp temp1 11)(terpri stream))
		 (if (equalp temp1 11)(format stream "KW_FOR"))
		 (if (equalp temp1 11)(terpri stream))
		 (if (equalp temp1 1)(format stream "OP_COMMA"))
		 (if (equalp temp1 1)(terpri stream))
		 (if (equalp temp1 0)(format stream "OP_PLUS"))
		 (if (equalp temp1 0)(terpri stream))
		 (if (equalp temp1 99)(format stream "OP_MINUS"))
		 (if (equalp temp1 99)(terpri stream))
		 (if (equalp temp1 4)(format stream "OP_DIV"))
		 (if (equalp temp1 4)(terpri stream))
		 (if (equalp temp1 5)(format stream "OP_MULT"))
		 (if (equalp temp1 5)(terpri stream))
		 (if (equalp temp1 7)(format stream "OP_DBLMULT"))
		 (if (equalp temp1 7)(terpri stream))
		 (if (equalp temp1 8)(format stream "OP_OC"))
		 (if (equalp temp1 8)(terpri stream))
		 (if (equalp temp1 9)(format stream "OP_CC"))
		 (if (equalp temp1 9)(terpri stream))
		 (if (equalp ")" ite)(setq temp1 2))
		 (if (equalp temp1 2)(format stream "OP_CP"))
		 (if (equalp temp1 2)(terpri stream))
		  (if (equalp "(" ite)(setq temp1 3))
		  (if (equalp temp1 3)(format stream "OP_OP"))
		  (if (equalp temp1 3)(terpri stream))
		  (if (equalp temp1 19)(format stream "OP_OP"))
		  (if (equalp temp1 19)(terpri stream))
		  (if (equalp temp1 19)(format stream "KW_CONCAT"))
		  (if (equalp temp1 19)(terpri stream))
		  (if (equalp temp1 20)(format stream "OP_OP"))
		  (if (equalp temp1 20)(terpri stream))
		  (if (equalp temp1 20)(format stream "KW_DISP"))
		  (if (equalp temp1 20)(terpri stream))
		  (if (equalp temp1 21)(format stream "OP_OP"))
		  (if (equalp temp1 21)(terpri stream))
		  (if (equalp temp1 21)(format stream "KW_SET"))
		  (if (equalp temp1 21)(terpri stream))
		  (if (equalp temp1 22)(format stream "OP_OP"))
		  (if (equalp temp1 22)(terpri stream))
		  (if (equalp temp1 22)(format stream "KW_LESS"))
		  (if (equalp temp1 22)(terpri stream))
		  (if (equalp temp1 23)(format stream "OP_OP"))
		  (if (equalp temp1 23)(terpri stream))
		  (if (equalp temp1 23)(format stream "KW_LESS | KW_EQUAL"))
		  (if (equalp temp1 23)(terpri stream))
		  (if (equalp temp1 24)(format stream "OP_OP"))
		  (if (equalp temp1 24)(terpri stream))
		  (if (equalp temp1 24)(format stream "KW_EXIT"))
		  (if (equalp temp1 24)(terpri stream))
		  (if (equalp temp1 24)(format stream "OP_CP"))
		  (if (equalp temp1 24)(terpri stream))
		  (if (equalp temp1 30)(format stream "OP_OP"))
		  (if (equalp temp1 30)(terpri stream))
		  (if (equalp temp1 30)(format stream "OP_PLUS"))
		  (if (equalp temp1 30)(terpri stream))
		  (if (equalp temp1 31)(format stream "OP_OP"))
		  (if (equalp temp1 31)(terpri stream))
		  (if (equalp temp1 31)(format stream "OP_MINUS"))
		  (if (equalp temp1 31)(terpri stream))
		  (if (equalp temp1 32)(format stream "OP_OP"))
		  (if (equalp temp1 32)(terpri stream))
		  (if (equalp temp1 32)(format stream "OP_MULT"))
		  (if (equalp temp1 32)(terpri stream))
		  (if (equalp temp1 33)(format stream "OP_OP"))
		  (if (equalp temp1 33)(terpri stream))
		  (if (equalp temp1 33)(format stream "OP_DIV"))
		  (if (equalp temp1 33)(terpri stream))
		  (if (equalp temp1 34)(format stream "OP_OP"))
		  (if (equalp temp1 34)(terpri stream))
		  (if (equalp temp1 34)(format stream "OP_DBLMULT"))
		  (if (equalp temp1 34)(terpri stream))
		  (setq u 0)
		  (if (equalp temp1 nil)
		  (map 'list (lambda (c) (if (equalp c #\")(setq u 1)))ite))
		  (if (equalp u 1) (format stream "OP_OC"))
		  (if (equalp u 1) (terpri stream))
		  (if (equalp u 1) (format stream "IDENTIFIERS"))
		  (if (equalp u 1) (terpri stream))
		  (if (equalp u 1) (format stream "OP_CC"))
		  (if (equalp u 1) (terpri stream))
		  (if (equalp u 1) (setq temp1 2))
		  (setq m 0)
		  (if (equalp temp1 nil)(map 'list (lambda (c) (if (equalp c #\))(setq m 1)))ite))
		  (if (equalp m 1)
		  (if (equalp (position-if #'digit-char-p (string ite)) nil) (format stream "IDENTIFIERS")
		  (format stream "VALUE")))
		  (if (equalp m 1)(terpri stream))
		  (if (equalp m 1)(format stream "OP_CP"))
		  (if (equalp m 1)(terpri stream))
		  (if (equalp m 1)(setq temp1 7))
		  (if (equalp temp1 nil)  (if (equalp ite "") ()
		  (if (equalp (position-if #'digit-char-p (string ite)) nil) (format stream "IDENTIFIERS")
		  (format stream "VALUE"))))
		  (if (equalp temp1 nil)  (if (equalp ite "") ()(terpri stream)))
		  (setq tempStr ite)
		(setq temp1 nil)
	)wordList))
	(setq u 0)
	(if (equalp tempStr nil)()(map 'list (lambda (c)
	(if (equalp c #\)) (format stream "OP_CP")(setq u 1))
	(if (equalp u 0) (terpri stream))
	(setq u 0))tempStr))
	(setq temp nil)
	(setq wordList nil))
	list)
	)
)
(read-as-list "C:\\Users\\user\\Desktop\\151044071_gumus_lemyeceren_hw2\\helloworld.lisp")
;;(load "C:\\Users\\user\\Desktop\\151044071_gumus_lemyeceren_hw2\\gppinterpreter.lsp")

